{"version":3,"file":"static/js/263.e93d0655.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/App.module.css?6c4d","webpack://goit-react-hw-08-phonebook/./src/components/Form/Form.module.css?89ba","redux/contacts/contactsSelector.js","components/Form/Form.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/Contacts/Contacts.module.css?5e71","components/Contacts/Contacts_item.jsx","components/Contacts/Contacts.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"component\":\"App_component__1of+-\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"input__contacts\":\"Form_input__contacts__D-Aj2\",\"input__item\":\"Form_input__item__pD4nd\",\"input__btn\":\"Form_input__btn__I1vLX\"};","export const getContacts = state => state.todo.contacts;\nexport const getFilter = state => state.todo.filter;\nexport const getIsLoading = state => state.todo.contacts.isLoading;\nexport const getError = state => state.todo.contacts.error;\n","// import { useDispatch, useSelector } from 'react-redux';\n// import { addContact, getContacts } from '..//../redux/contactSlice';\nimport FormCss from '../Form/Form.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contactsOperation';\nimport { getContacts } from '../../redux/contacts/contactsSelector';\n\nlet newUser = [];\n\nexport const ContactForm = () => {\n  const { items } = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const addingContacts = e => {\n    e.preventDefault();\n    let name = e.target.name.value;\n    let number = e.target.number.value;\n    if (items.find(contact => contact.name === name)) {\n      alert(`${name} is already existing`);\n      e.target.name.value = '';\n    } else {\n      newUser = {\n        name,\n        number,\n      };\n      dispatch(addContact(newUser));\n      e.target.name.value = e.target.number.value = '';\n    }\n  };\n\n  return (\n    <form onSubmit={addingContacts} className={FormCss.form}>\n      <div className={FormCss.input__contacts}>\n        <label className={FormCss.input__item}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n\n        <label className={FormCss.input__item}>\n          Phone\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button type=\"submit\" className={FormCss.input__btn}>\n          Add contact\n        </button>\n      </div>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import { useDispatch } from 'react-redux';\nimport { filtered } from '../../redux/contacts/filter';\nimport filterCss from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    let filterContacts = e.target.value;\n    dispatch(filtered(filterContacts));\n  };\n\n  return (\n    <div className={filterCss.filter}>\n      <label className={filterCss.label}>\n        Find contacts by name\n        <input type=\"text\" onChange={handleChange} className={filterCss.input} />\n      </label>\n    </div>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contacts_contact__OJvRd\",\"btn\":\"Contacts_btn__rNftF\",\"contact_item\":\"Contacts_contact_item__UDACC\",\"contact_item_delete\":\"Contacts_contact_item_delete__RFOht\"};","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contactsOperation';\nimport ContactCss from '../Contacts/Contacts.module.css';\n\nexport const ContactsItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  // const edit = e => {\n  //   e.preventDefault();\n  //   console.dir(e.target.parentElement.id);\n  //   console.dir(e.target.parentElement);\n  // };\n  return (\n    <li id={id} key={nanoid} className={ContactCss.contact_item}>\n      <p>*</p>\n      {name}: <b>{number}</b>\n      {/* <button type=\"text\" className={ContactCss.btn} onClick={edit}>\n        Edit\n      </button> */}\n      <button type=\"text\" className={ContactCss.btn} onClick={() => dispatch(deleteContact(id))}>\n        Delete\n      </button>\n    </li>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { ContactsItem } from '../Contacts/Contacts_item';\nimport { Loader } from '../Loader/Loader';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contacts/contactsOperation';\nimport ContactCss from './Contacts.module.css';\nimport { getContacts, getFilter, getError, getIsLoading } from '../../redux/contacts/contactsSelector';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  // Отримуємо частини стану\n  const { items } = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const options = items.filter(contacts => contacts.name.toLowerCase().includes(filter.toLowerCase()));\n\n  return (\n    <div>\n      {isLoading ? (\n        <Loader />\n      ) : error !== null ? (\n        error\n      ) : options.length !== 0 ? (\n        <ul className={ContactCss.contact}>\n          {options.map(({ id, name, number }) => (\n            <ContactsItem name={name} id={id} key={id} number={number} />\n          ))}\n        </ul>\n      ) : filter === '' ? (\n        'Контакти пусті. Будь ласка додайте контакти!!!'\n      ) : (\n        'Збігів не знайдено'\n      )}\n    </div>\n  );\n};\n","import AppCss from '../components/App.module.css';\nimport { ContactForm } from '../components/Form/Form';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/Contacts/Contacts';\n\nexport default function Main() {\n  return (\n    //Щось гітхаб не прийняв зміни при перейменуванні файлу\n    <>\n      <div className={AppCss.component}>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    </>\n  );\n}\n"],"names":["getContacts","state","todo","contacts","getFilter","filter","getIsLoading","isLoading","getError","error","newUser","ContactForm","items","useSelector","dispatch","useDispatch","_jsx","onSubmit","e","preventDefault","name","target","value","number","find","contact","alert","concat","addContact","className","FormCss","children","_jsxs","type","pattern","title","required","Filter","filterCss","onChange","filterContacts","filtered","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactsItem","_ref","ContactCss","onClick","deleteContact","ContactList","useEffect","fetchContacts","options","toLowerCase","includes","Loader","map","Main","_Fragment","AppCss"],"sourceRoot":""}